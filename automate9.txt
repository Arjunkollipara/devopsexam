#!/bin/bash

# Variables
GITHUB_REPO="https://github.com/shiv4j/week9"
APP_NAME="nodejs-app"
DOCKER_IMAGE="arjunkollipara/nodejs-app:v1"
NAMESPACE="default"

# Clone GitHub Repository
echo "Cloning GitHub repository..."
git clone $GITHUB_REPO || { echo "Failed to clone repo"; exit 1; }
cd week9

# Build Docker Image
echo "Building Docker image..."
docker build -t $DOCKER_IMAGE . || { echo "Failed to build Docker image"; exit 1; }

# Push Docker Image to Registry
echo "Pushing Docker image to registry..."
docker push $DOCKER_IMAGE || { echo "Failed to push Docker image"; exit 1; }

# Create Kubernetes Deployment YAML
echo "Creating Kubernetes manifests..."
cat <<EOF > deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
spec:
  replicas: 2
  selector:
    matchLabels:
      app: $APP_NAME
  template:
    metadata:
      labels:
        app: $APP_NAME
    spec:
      containers:
      - name: $APP_NAME
        image: $DOCKER_IMAGE
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_NAME-service
  namespace: $NAMESPACE
spec:
  type: LoadBalancer
  selector:
    app: $APP_NAME
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
EOF

# Apply Kubernetes Deployment
echo "Deploying to Kubernetes..."
kubectl apply -f deployment.yaml || { echo "Failed to deploy to Kubernetes"; exit 1; }

# Wait for Deployment to Be Ready
echo "Waiting for deployment to be ready..."
kubectl rollout status deployment/$APP_NAME || { echo "Deployment failed"; exit 1; }

# Fetch Service URL
SERVICE_IP=$(kubectl get service/$APP_NAME-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
NODE_PORT=$(kubectl get service/$APP_NAME-service -o jsonpath='{.spec.ports[0].nodePort}')

echo "Application deployed successfully!"
echo "Access the application at http://$SERVICE_IP or http://localhost:$NODE_PORT"


bash:chmod +x deploy.sh
./deploy.sh
